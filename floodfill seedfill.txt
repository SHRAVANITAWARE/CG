#include <GL/glut.h>
#include <vector>
#include <iostream>

using namespace std;

vector<pair<int, int>> points;
bool polygonComplete = false;
int fillColor[3] = {0, 255, 0}; // Green
int originalColor[3];           // To be detected at seed

// Get pixel color
void getPixelColor(int x, int y, int color[3]) {
    unsigned char pixel[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_UNSIGNED_BYTE, pixel);
    color[0] = pixel[0];
    color[1] = pixel[1];
    color[2] = pixel[2];
}

// Compare two colors
bool isSameColor(int c1[3], int c2[3]) {
    return (c1[0] == c2[0] && c1[1] == c2[1] && c1[2] == c2[2]);
}

// Set pixel
void setPixel(int x, int y, int r, int g, int b) {
    glColor3ub(r, g, b);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
    glFlush();
}

// Flood fill (4-connected)
void floodFill(int x, int y, int fillColor[3], int oldColor[3]) {
    int currentColor[3];
    getPixelColor(x, y, currentColor);

    if (isSameColor(currentColor, oldColor) && !isSameColor(currentColor, fillColor)) {
        setPixel(x, y, fillColor[0], fillColor[1], fillColor[2]);
        floodFill(x + 1, y, fillColor, oldColor);
        floodFill(x - 1, y, fillColor, oldColor);
        floodFill(x, y + 1, fillColor, oldColor);
        floodFill(x, y - 1, fillColor, oldColor);
    }
}

// Draw polygon from points
void drawPolygon() {
    glColor3ub(0, 0, 0); // Black border
    glBegin(GL_LINE_LOOP);
    for (auto p : points)
        glVertex2i(p.first, p.second);
    glEnd();
    glFlush();
}

// Display callback
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    if (polygonComplete)
        drawPolygon();
    glFlush();
}

// Mouse click handler
void mouse(int button, int state, int x, int y) {
    y = 600 - y;

    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN && !polygonComplete) {
        points.push_back({x, y});
    }

    if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN && !polygonComplete) {
        polygonComplete = true;
        drawPolygon();
    }

    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN && polygonComplete) {
        getPixelColor(x, y, originalColor);
        floodFill(x, y, fillColor, originalColor);
    }
}

// Keyboard input handler
void keyboard(unsigned char key, int x, int y) {
    if (key == 'r' || key == 'R') {
        points.clear();
        polygonComplete = false;
        glClear(GL_COLOR_BUFFER_BIT);
        glFlush();
    }
    if (key == 27) // ESC
        exit(0);
}

// Menu handler
void menu(int choice) {
    switch (choice) {
        case 1:
            cout << "Click inside the polygon to flood fill.\n";
            break;
        case 2:
            keyboard('r', 0, 0);
            break;
        case 3:
            exit(0);
            break;
    }
}

// Setup OpenGL
void init() {
    glClearColor(1, 1, 1, 1); // White background
    gluOrtho2D(0, 800, 0, 600);
}

// Main
int main(int argc, char** argv) {
    cout << "Instructions:\n";
    cout << "- Left-click to draw polygon vertices\n";
    cout << "- Right-click to finish polygon\n";
    cout << "- Left-click inside to flood fill (after selecting from menu or pressing 'F')\n";
    cout << "- 'R' to reset, 'ESC' to quit\n";

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Flood Fill - OpenGL");

    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);

    // GLUT right-click menu
    glutCreateMenu(menu);
    glutAddMenuEntry("1. Start Fill", 1);
    glutAddMenuEntry("2. Reset", 2);
    glutAddMenuEntry("3. Exit", 3);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutMainLoop();
    return 0;
}
