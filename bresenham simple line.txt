#include <GL/glut.h>
#include <iostream>
#include <cmath>

using namespace std;

// Starting and ending points of the line
int x1 = 100, y1 = 100;
int x2 = 500, y2 = 300;

void setPixel(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
    glFlush();
}

void bresenhamLine(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);

    int x, y;
    int sx = (x2 >= x1) ? 1 : -1;
    int sy = (y2 >= y1) ? 1 : -1;

    bool isSteep = dy > dx;

    if (isSteep) {
        swap(dx, dy);
    }

    int p = 2 * dy - dx;

    x = x1;
    y = y1;

    for (int i = 0; i <= dx; i++) {
        setPixel(x, y);

        if (p >= 0) {
            if (isSteep)
                x += sx;
            else
                y += sy;
            p = p + 2 * (dy - dx);
        } else {
            p = p + 2 * dy;
        }

        if (isSteep)
            y += sy;
        else
            x += sx;
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 0.0, 0.0); // Red line
    glPointSize(2.0);

    bresenhamLine(x1, y1, x2, y2);

    glFlush();
}

void init() {
    glClearColor(1, 1, 1, 1); // White background
    gluOrtho2D(0, 640, 0, 480); // Coordinate system
}

int main(int argc, char** argv) {
    cout << "Drawing a line from (" << x1 << ", " << y1 << ") to (" << x2 << ", " << y2 << ")\n";

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Bresenham Line Drawing");

    init();
    glutDisplayFunc(display);
    glutMainLoop();

    return 0;
}
