#include <GL/glut.h>
#include <vector>
#include <iostream>

using namespace std;

vector<pair<int, int>> points;
bool polygonComplete = false;
int fillColor[3] = {255, 0, 0};        // Red
int boundaryColor[3] = {0, 0, 0};      // Black

void setPixel(int x, int y, int r, int g, int b) {
    glBegin(GL_POINTS);
    glColor3ub(r, g, b);
    glVertex2i(x, y);
    glEnd();
    glFlush();
}

void getPixelColor(int x, int y, int color[3]) {
    unsigned char pixel[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_UNSIGNED_BYTE, pixel);
    color[0] = pixel[0];
    color[1] = pixel[1];
    color[2] = pixel[2];
}

bool isSameColor(int c1[3], int c2[3]) {
    return (c1[0] == c2[0] && c1[1] == c2[1] && c1[2] == c2[2]);
}

void boundaryFill(int x, int y, int fillColor[3], int boundaryColor[3]) {
    int currentColor[3];
    getPixelColor(x, y, currentColor);

    if (!isSameColor(currentColor, boundaryColor) && !isSameColor(currentColor, fillColor)) {
        setPixel(x, y, fillColor[0], fillColor[1], fillColor[2]);
        boundaryFill(x + 1, y, fillColor, boundaryColor);
        boundaryFill(x - 1, y, fillColor, boundaryColor);
        boundaryFill(x, y + 1, fillColor, boundaryColor);
        boundaryFill(x, y - 1, fillColor, boundaryColor);
    }
}

void drawPolygon() {
    glColor3ub(boundaryColor[0], boundaryColor[1], boundaryColor[2]);
    glBegin(GL_LINE_LOOP);
    for (auto p : points) {
        glVertex2i(p.first, p.second);
    }
    glEnd();
    glFlush();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    if (polygonComplete)
        drawPolygon();
    glFlush();
}

void mouse(int button, int state, int x, int y) {
    y = 600 - y; // Flip y-axis for OpenGL

    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN && !polygonComplete) {
        points.push_back({x, y});
    }

    if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN && !polygonComplete) {
        polygonComplete = true;
        drawPolygon();
    }
}

void keyboard(unsigned char key, int x, int y) {
    if (key == 'f' || key == 'F') {
        if (polygonComplete) {
            cout << "Click inside the polygon to start filling...\n";
        }
    }
    if (key == 'r' || key == 'R') {
        points.clear();
        polygonComplete = false;
        glClear(GL_COLOR_BUFFER_BIT);
        glFlush();
    }
    if (key == 27) { // ESC
        exit(0);
    }
}

void mouseFill(int button, int state, int x, int y) {
    y = 600 - y;
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN && polygonComplete) {
        boundaryFill(x, y, fillColor, boundaryColor);
    }
}

void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0); // White background
    gluOrtho2D(0, 800, 0, 600);
}

int main(int argc, char** argv) {
    cout << "Instructions:\n";
    cout << "Left-click to draw polygon vertices\n";
    cout << "Right-click to close the polygon\n";
    cout << "Press 'F' and then left-click inside polygon to fill\n";
    cout << "Press 'R' to reset\n";
    cout << "Press 'ESC' to exit\n";

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Boundary Fill - OpenGL");

    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);
    glutMotionFunc(NULL);
    glutMouseFunc(mouseFill); // Separate for fill clicking

    glutMainLoop();
    return 0;
}
