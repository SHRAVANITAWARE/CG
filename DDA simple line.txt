#include <GL/glut.h>
#include <iostream>
#include <cmath>

using namespace std;

// Coordinates for the line
int x1 = 100, y1 = 100;
int x2 = 500, y2 = 300;

void setPixel(float x, float y) {
    glBegin(GL_POINTS);
    glVertex2i(round(x), round(y));
    glEnd();
    glFlush();
}

void drawLineDDA(int x1, int y1, int x2, int y2) {
    float dx = x2 - x1;
    float dy = y2 - y1;

    float steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);

    float xIncrement = dx / steps;
    float yIncrement = dy / steps;

    float x = x1;
    float y = y1;

    for (int i = 0; i <= steps; i++) {
        setPixel(x, y);
        x += xIncrement;
        y += yIncrement;
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 0.0, 1.0); // Blue line
    glPointSize(2.0);

    drawLineDDA(x1, y1, x2, y2);

    glFlush();
}

void init() {
    glClearColor(1, 1, 1, 1); // White background
    gluOrtho2D(0, 640, 0, 480); // Coordinate system
}

int main(int argc, char** argv) {
    cout << "Drawing a line using DDA from (" << x1 << ", " << y1 << ") to (" << x2 << ", " << y2 << ")\n";

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutCreateWindow("DDA Line Drawing Algorithm");

    init();
    glutDisplayFunc(display);
    glutMainLoop();

    return 0;
}
